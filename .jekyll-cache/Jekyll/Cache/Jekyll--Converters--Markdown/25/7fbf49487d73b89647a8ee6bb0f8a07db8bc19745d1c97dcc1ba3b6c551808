I"È.<p>Here I would like to argue for a style of code I have come to like. There are a few phrases I associate with it.</p>
<ol>
  <li>Using sane defaults</li>
  <li>Write your code so that it is always true.</li>
  <li><a href="https://en.wikipedia.org/wiki/Null_object_pattern#JavaScript">Null object pattern</a></li>
  <li>Dynamic Dispatch</li>
</ol>

<p>Now itâ€™s not that 3 and 4 are 1 and 2, but rather it is because I find Null Objectâ€™s to be sane defaults, and Dynamic Dispatch to be a way to write your code so that itâ€™s always true.  Iâ€™ll leave discussion of Null objectâ€™s and Dynamic dispatch for another time.</p>

<p>A recent issue that came up put this at the forefront of my mind. It involved updating a pie chart. Now this pie chart could have many states, but two basic ones, we will throw in a third for good measure.</p>
<ol>
  <li>Loading</li>
  <li>Empty</li>
  <li>Populated</li>
</ol>

<p>Now during the pie chart initialization code, I saw something like</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">pieChartEmpty</span> <span class="o">=</span> <span class="p">{</span>
   <span class="na">text</span><span class="p">:</span> <span class="dl">'</span><span class="s1">This pie chart is empty, something broke!</span><span class="dl">'</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">pieChartLoading</span> <span class="o">=</span> <span class="p">{</span>
   <span class="na">text</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Please wait while the data loads...</span><span class="dl">'</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">pieChart</span> <span class="o">=</span> <span class="p">{</span>
<span class="p">};</span></code></pre></figure>

<p>Do you see where this is going? Letâ€™s attach that loading state.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">   <span class="nx">attachPieChart</span><span class="p">(</span><span class="nx">pieChartLoading</span><span class="p">)</span></code></pre></figure>

<p>Letâ€™s fetch some data.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">fetchData</span><span class="p">()</span> <span class="p">{</span>
   <span class="nx">fetch</span><span class="p">(</span><span class="nx">fromSomeEndpoint</span><span class="p">)</span>
       <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
           <span class="k">if</span><span class="p">(</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span> <span class="p">{</span>
               <span class="nx">attachPieChart</span><span class="p">(</span><span class="nx">pieChartEmpty</span><span class="p">)</span>
           <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
               <span class="nx">pieChart</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span>
               <span class="nx">attachPieChart</span><span class="p">(</span><span class="nx">pieChart</span><span class="p">)</span>
           <span class="p">}</span>
       <span class="p">})</span>
       <span class="p">.</span><span class="k">catch</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
           <span class="nx">attachPieChart</span><span class="p">(</span><span class="nx">pieChartEmpty</span><span class="p">)</span>
       <span class="p">})</span>
<span class="p">}</span></code></pre></figure>

<p>Maybe the user manipulates the data in some way.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">handleSomeUserInteraction</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span> <span class="p">{</span>
       <span class="nx">attachPieChart</span><span class="p">(</span><span class="nx">pieChartEmpty</span><span class="p">)</span>
   <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
       <span class="nx">pieChart</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span>
       <span class="nx">attachPieChart</span><span class="p">(</span><span class="nx">pieChart</span><span class="p">)</span>
   <span class="p">}</span>   
<span class="p">}</span></code></pre></figure>

<p>My issue is why are we creating special cases?  I am sure this empty pie chart and the loading pie chart arenâ€™t going to be that far off from the normal pie chart. We probably only need to feed in the right data for it to work correctly.  The primary problem here is that in the developers mind they are creating these special scenarios where we need to start littering the code with if/else checks to see which scenarios we are in and then run a different set of instructions.</p>

<p>A more robust way to deal with this solution is to</p>
<h4 id="1-validate-your-inputuse-sane-defaults">1. Validate your input/Use sane defaults</h4>

<ul>
  <li>This is slightly different than my other post, but in the more normal sense of the expression.  If you donâ€™t want to deal with, maybe in this case, nulls and undefineds then check for that at the boundary of your system and ensure they never make it in.  Switch out those nulls for integer zeros which your pie chart is more likely to handle.  We will assume we are fetching the data from your internal backend system that you have control over.  The reason why I can put these two things together is sometimes we are the source of our own bad input.</li>
</ul>

<h4 id="2-make-your-target-component-more-robustwrite-your-code-so-that-its-always-true">2. Make your target component more robust/Write your code so that itâ€™s always true.</h4>

<ul>
  <li>In this particular case maybe your input is already feeding you zeros, and your component is having trouble handling that.  Ok if a section has a zero, shouldnâ€™t it not take up any space on a pie chart?  And if everything is zero, wouldnâ€™t it be reasonable to gray out the chart?  If someone is explicitly feeding me zeros that doesnâ€™t sound crazy, and it would probably be good to call out that section on the legend.</li>
</ul>

<h4 id="3-choose-where-your-complexity-is">3. Choose where your complexity is.</h4>

<ul>
  <li>I am going to make a separate blog post on this, but this is an excellent example of it, so I would like to go ahead and call it out.  Sometimes good engineering is about choosing where your complexity is.  As an engineer you are given problems to solve and you donâ€™t get to decide how complex the problems are you get to design the solutions.  Meaning you get to decide the types of tools and how those tools come together to reflect the problem. You also get to decide which parts of the system are more complex than the others.  In this case you should move the complexity from the fetchData function and the handleUserInteraction functions and move this complexity to the backend, and move complexity to the UI Component to handle more scenarios.  Frequently when the business folks say they want something simple what they mean is they want something fast, so donâ€™t confuse those two.  If they give you a complex problem it will never truly be solved by a simple solution, itâ€™s going to miss use cases.  If you bring too complex of a solution to a problem, itâ€™s not going to be worth it to maintain. It needs to fall in a â€˜goldilocks zoneâ€™ it needs to be â€˜just rightâ€™.  Even still you can choose where your complexity is.</li>
</ul>

<p>Now letâ€™s try it again with some of these suggestions.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">pieChart</span> <span class="o">=</span> <span class="p">{</span>
   <span class="na">text</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Please wait while the data loads...</span><span class="dl">'</span>
<span class="p">};</span>
<span class="nx">attachPieChart</span><span class="p">(</span><span class="nx">pieChart</span><span class="p">)</span></code></pre></figure>

<p>Ok, only one thing to think about.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">fetchData</span><span class="p">()</span> <span class="p">{</span>
   <span class="nx">fetch</span><span class="p">(</span><span class="nx">fromSomeEndpoint</span><span class="p">)</span>
       <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
           <span class="c1">//We will do this here, but if it's the backend that is calling an external api, the backend should verify the input.</span>
           <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">val</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">isNumber</span><span class="p">(</span><span class="nx">val</span><span class="p">))</span> <span class="p">{</span>
                   <span class="k">return</span> <span class="nx">val</span><span class="p">;</span>
               <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">isNull</span><span class="p">(</span><span class="nx">val</span><span class="p">))</span> <span class="p">{</span>
                   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                   <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="dl">"</span><span class="s2">Unhandled Input</span><span class="dl">"</span><span class="p">);</span>
               <span class="p">}</span>
           <span class="p">});</span>
       <span class="p">})</span>
       <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
           <span class="nx">pieChart</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span>
           <span class="nx">pieChart</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Click on a section</span><span class="dl">'</span>
       <span class="p">})</span>
       <span class="p">.</span><span class="k">catch</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
           <span class="nx">pieChart</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">This pie chart is empty, something broke!</span><span class="dl">'</span><span class="p">;</span>
       <span class="p">})</span>
<span class="p">}</span></code></pre></figure>

<p>The attachPieChart function will probably need some additional robustness to handle responding to a changing object.  Thatâ€™s fine, thatâ€™s a feature.</p>

:ET